#pragma once
#include "SoundDevice.h"
#include "SoundEffectsPlayer.h"
#include "SoundEffectsLibrary.h"

namespace GridGame {
SoundDevice* sd = LISTENER->Get();
int SciFiSound = SE_LOAD("../res/soundeffects/sci-fidrone.ogg");
SoundEffectsPlayer sound_effects_player_forSciFiSound;
const constexpr int ROWS = 10, COLUMNS = 10;
const constexpr float CELLSIZE = 40;  // assumes ROWS == COLUMNS for simplicity
enum class GraphicKey { UNSEARCHED, SEARCHED, PLAYER1, PLAYER2 };
GraphicKey map[ROWS][COLUMNS];
bool mapHasChanged = true;  //process a map draw update
float aColor[3] = { 0,1,0 };

void init()
	ALint attunation = AL_INVERSE_DISTANCE_CLAMPED;
	sd->SetAttunation(attunation);
	sd->SetLocation(0.f, 0.f, 0.f);
	sd->SetOrientation(0.f, 1.f, 0.f, 0.f, 0.f, 1.f);

	sound_effects_player_forSciFiSound.SetLooping(true);
	sound_effects_player_forSciFiSound.SetPosition(ROWS-1, COLUMNS-1, 0);
	sound_effects_player_forSciFiSound.Play(SciFiSound);
}
void processMapChanges()
{
	for (int x = 0; x < ROWS; x++)  //rows
	{
		for (int y = 0; y < COLUMNS; y++)  //columns
		{
			if (x == PLAYER1.mapPos[0] && y == PLAYER1.mapPos[1])
				map[x][y] = GraphicKey::PLAYER1;
			else if (x == PLAYER2.mapPos[0] && y == PLAYER2.mapPos[1])
				map[x][y] = GraphicKey::PLAYER2;
			else
				map[x][y] = GraphicKey::UNSEARCHED;
		}
	}
}
void processPlayer(float dt)
{
	static const float MOVECD = .1667f;
	static float stopwatch = .1667f;
	stopwatch += dt;
	if (stopwatch > MOVECD)
	{
		if (PLAYER1.hasUnprocessedMoved)
		{
			stopwatch = 0.f;
			PLAYER1.hasUnprocessedMoved = false;
			mapHasChanged = true;
			switch (PLAYER1.direction)
			{
			case Actor::Orientation::UP:
				if (PLAYER1.mapPos[1] < ROWS - 1)
					PLAYER1.mapPos[1]++;
				break;
			case Actor::Orientation::DOWN:
				if (PLAYER1.mapPos[1] > 0)
					PLAYER1.mapPos[1]--;
				break;
			case Actor::Orientation::LEFT:
				if (PLAYER1.mapPos[0] > 0)
					PLAYER1.mapPos[0]--;
				break;
			case Actor::Orientation::RIGHT:
				if (PLAYER1.mapPos[0] < COLUMNS -1)
					PLAYER1.mapPos[0]++;
				break;
			case Actor::Orientation::PRONE:
				break;
			default:
				break;
			}
			setPLAYER1ListenerLoc();
		}
	}
}
void processAI(float dt) {
	if (PLAYER2.hasUnprocessedMoved)
	{
		switch (PLAYER2.direction)
		{
		case Actor::Orientation::UP:
			break;
		case Actor::Orientation::DOWN:
			break;
		case Actor::Orientation::LEFT:
			break;
		case Actor::Orientation::RIGHT:
			break;
		case Actor::Orientation::PRONE:
			break;
		default:
			break;
		}
	}
}
void setCellDrawColor(const int& x, const int& y) {
	processMapChanges();
	switch (map[x][y]) {
	case GraphicKey::UNSEARCHED:
		aColor[0] = 0.1f;
		aColor[1] = 0.4f;
		aColor[2] = 0.1f;
		break;
	case GraphicKey::SEARCHED:
		aColor[0] = 0.1f;
		aColor[1] = 0.1f;
		aColor[2] = 0.1f;
		break;
	case GraphicKey::PLAYER1:
		aColor[0] = 0.1f;
		aColor[1] = 0.1f;
		aColor[2] = 0.9f;
		break;
	case GraphicKey::PLAYER2:
		aColor[0] = 0.9f;
		aColor[1] = 0.1f;
		aColor[2] = 0.1f;
		break;
	default:
		break;
	}
}
void clearScreen()
{
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
}
void renderScene()
{
	if (mapHasChanged)
	{
		mapHasChanged = false;
		clearScreen();
		glUseProgram(programID);
		/// <summary>
		/// Where map[0][0] is the Bottom Left, and map[ROWS-1][COLUMNS-1] is the Top Right.
		/// </summary>
		for (int r = 0; r < ROWS; r++) {
			for (int c = 0; c < COLUMNS; c++)
			{
				setCellDrawColor(r, c);
				glUniform3fv(glGetUniformLocation(programID, "ucolor"), 1, &aColor[0]);
				glm::mat4 ModelMatrix(1);
				glm::vec3 Translate((float)((float)r / (float)COLUMNS) * 2.f - .9f, (float)((float)c / (float)ROWS) * 2.f - .9f, 0.f);

				//std::cout << "crl: " << Translate.x << ", " << Translate.y << '|';
				ModelMatrix = glm::translate(ModelMatrix, Translate);
				glm::vec3 Scale((float)ROWS / (float)CELLSIZE - .08f);
				ModelMatrix = glm::scale(ModelMatrix, Scale);
				//static const glm::vec3 rot_ax_x(1, 0, 0);
				//static const glm::vec3 rot_ax_y(0, 1, 0);
				//static const glm::vec3 rot_ax_z(0, 0, 1);
				//glm::vec3 Rotation(0);
				//ModelMatrix = glm::rotate(ModelMatrix, Rotation.x, rot_ax_x);
				//ModelMatrix = glm::rotate(ModelMatrix, Rotation.y, rot_ax_y);
				//ModelMatrix = glm::rotate(ModelMatrix, Rotation.z, rot_ax_z);
				glUniformMatrix4fv(glGetUniformLocation(programID, "modelmatrix"), 1, false, &ModelMatrix[0][0]);
				glDrawArrays(GL_TRIANGLES, 0, 12 * 3); // 12*3 indices starting at 0 -> 12 triangles -> 6 squares
			}
		}
		glfwSwapBuffers(window);
	}
	glfwPollEvents();
}
bool isRunning() { return (!glfwWindowShouldClose(window)); }
}  // end namespace TTD
